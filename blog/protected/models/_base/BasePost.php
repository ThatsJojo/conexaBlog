<?php

/**
 * This is the model base class for the table "posts".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Post".
 *
 * Columns in table "posts" available as properties of the model,
 * followed by relations of table "posts" available as properties of the model.
 *
 * @property string $post_id
 * @property string $post_author
 * @property string $post_date
 * @property string $post_title
 * @property string $post_status
 * @property string $post_mimetype
 * @property string $post_modified
 * @property string $post_content_filtered
 *
 * @property Comment[] $comments
 * @property Postmeta[] $postmetas
 * @property User $postAuthor
 * @property TermRelationship[] $termRelationships
 */
abstract class BasePost extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'posts';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Post|Posts', $n);
	}

	public static function representingColumn() {
		return 'post_date';
	}

	public function rules() {
		return array(
			array('post_author, post_status', 'length', 'max'=>20),
			array('post_mimetype', 'length', 'max'=>100),
			array('post_date, post_title, post_modified, post_content_filtered', 'safe'),
			array('post_author, post_date, post_title, post_status, post_mimetype, post_modified, post_content_filtered', 'default', 'setOnEmpty' => true, 'value' => null),
			array('post_id, post_author, post_date, post_title, post_status, post_mimetype, post_modified, post_content_filtered', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'comments' => array(self::HAS_MANY, 'Comment', 'comment_post_id'),
			'postmetas' => array(self::HAS_MANY, 'Postmeta', 'post_id'),
			'postAuthor' => array(self::BELONGS_TO, 'User', 'post_author'),
			'termRelationships' => array(self::HAS_MANY, 'TermRelationship', 'post_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'post_id' => Yii::t('app', 'Post'),
			'post_author' => null,
			'post_date' => Yii::t('app', 'Post Date'),
			'post_title' => Yii::t('app', 'Post Title'),
			'post_status' => Yii::t('app', 'Post Status'),
			'post_mimetype' => Yii::t('app', 'Post Mimetype'),
			'post_modified' => Yii::t('app', 'Post Modified'),
			'post_content_filtered' => Yii::t('app', 'Post Content Filtered'),
			'comments' => null,
			'postmetas' => null,
			'postAuthor' => null,
			'termRelationships' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('post_id', $this->post_id, true);
		$criteria->compare('post_author', $this->post_author);
		$criteria->compare('post_date', $this->post_date, true);
		$criteria->compare('post_title', $this->post_title, true);
		$criteria->compare('post_status', $this->post_status, true);
		$criteria->compare('post_mimetype', $this->post_mimetype, true);
		$criteria->compare('post_modified', $this->post_modified, true);
		$criteria->compare('post_content_filtered', $this->post_content_filtered, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}